{"version":3,"sources":["logo.svg","schedule.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Schedule1","props","getUserList","a","fetch","mode","headers","response","ok","json","data","console","log","setState","state","crewSchedule","error","handleSubmit","bind","confirmation","event","this","className","style","color","id","Table","striped","bordered","hover","size","map","schedule","key","name","mon","tues","wed","thrus","fri","sat","sun","Button","variant","type","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,0MCGtBC,E,kDAGnB,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAgBTC,YAjBmB,sBAiBL,8BAAAC,EAAA,+EAEiBC,MAAM,wEAAyE,CACtGC,KAAM,OAGNC,QAAS,CACP,eAAgB,mBAEjB,8BAA+B,OAT1B,YAEAC,EAFA,QAiBOC,GAjBP,iCAkBiBD,EAASE,OAlB1B,OAkBIC,EAlBJ,OAmBFC,QAAQC,IAAI,eAAeF,GAC3B,EAAKG,SAAL,2BAAkB,EAAKC,OAAvB,IAA8BC,aAAcL,KApB1C,wBAqBG,EAAKG,SAAL,2BAAkB,EAAKC,OAAvB,IAA8BE,OAAO,KArBxC,0DAuBd,EAAKH,SAAL,2BAAmB,EAAKC,OAAxB,IAA+BE,OAAO,KACtCL,QAAQC,IAAR,MAxBc,0DAfX,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKJ,MAAQ,CAAEK,cAAa,EAC1BJ,aAAc,GACVC,OAAO,GALG,E,yDAQLI,GACXC,KAAKR,SAAL,2BAAkBQ,KAAKP,OAAvB,IAA8BK,cAAa,O,0CAK1CE,KAAKnB,gB,+BAkCT,OAED,yBAAKoB,UAAU,+BAEbD,KAAKP,MAAMK,cAAgB,0BAAMI,MAAO,CAAEC,MAAO,SAAtB,8BAE7B,wBAAIC,GAAG,sBAAP,yBACC,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,KAAK,MAClC,+BACE,4BACE,wCACA,sCACA,uCACA,yCACA,wCACA,sCACA,wCACA,wCAGJ,+BAKCT,KAAKP,MAAMC,cAAgBM,KAAKP,MAAMC,aAAagB,KAAI,SAAAC,GAAQ,OAC9D,wBAAIC,IAAKD,GAEP,4BAAKA,EAASE,MACd,4BAAKF,EAASG,KACd,4BAAKH,EAASI,KAAd,KACA,gCAAMJ,EAASK,IAAf,KACA,gCAAML,EAASM,MAAf,KACA,gCAAMN,EAASO,IAAf,KACA,gCAAMP,EAASQ,IAAf,KACA,gCAAMR,EAASS,IAAf,WAWL,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,SAASC,QAASxB,KAAKJ,cAAtD,yB,GAjGsC6B,aCSxBC,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,QCKc0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLL,QAAQK,MAAMA,EAAMiD,c","file":"static/js/main.6bfc57b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport {Table, Form, Button} from 'react-bootstrap';\n\nexport default class Schedule1 extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { confirmation:false,\n      crewSchedule: [], // list is empty in the beginning\n          error: false};\n  }\n\n  handleSubmit(event){\n    this.setState({...this.state, confirmation:true});\n  }\n\n  \n componentDidMount() {\n     this.getUserList(); // function call\n }\n\n getUserList = async () => {\n     try { //try to get data\n         const response = await fetch(\"http://ec2-3-87-118-108.compute-1.amazonaws.com:8080/retrieveSchedule\", {\n         mode: 'cors', // no-cors, *cors, same-origin\n        //  cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        //  credentials: 'same-origin', // include, *same-origin, omit\n         headers: {\n           'Content-Type': 'application/json',\n          //  'Access-Control-Allow-Origin': 'http://localhost:3000'\n          'Access-Control-Allow-Origin': '*'\n\n           // 'Content-Type': 'application/x-www-form-urlencoded',\n         },\n        //  redirect: 'follow', // manual, *follow, error\n        //  referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        //  body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n       });\n         if (response.ok) { // ckeck if status code is 200\n             const data = await response.json();\n             console.log(\"DATA:.......\",data);\n             this.setState({...this.state, crewSchedule: data});\n         } else { this.setState({...this.state, error: true }) }\n     } catch (e) { //code will jump here if there is a network problem\n this.setState({ ...this.state, error: true });\n console.log(e);\n \n}\n};\n\n    render() {\n      \n return (\n   \n<div className=\"schedule1-component m-4 p-4\">\n{\n  this.state.confirmation && <span style={{ color: 'blue' }} > schedule(s) broadcasted !</span> }\n\n<h2 id=\"crewDashBoardTitle\">Schedule Suggestion 1</h2>\n <Table striped bordered hover size=\"sm\">\n  <thead>\n    <tr>\n      <th>Employee</th>\n      <th>Monday</th>\n      <th>Tuesday</th>\n      <th>Wednesday</th>\n      <th>Thursday</th>\n      <th>Friday</th>\n      <th>Saturday</th>\n      <th>Sunday</th>\n    </tr>\n  </thead>\n  <tbody>\n\n\n {/* <div> */}\n \n  {this.state.crewSchedule && this.state.crewSchedule.map(schedule => (\n    <tr key={schedule}>\n     \n      <td>{schedule.name}</td>\n      <td>{schedule.mon}</td>\n      <td>{schedule.tues} </td>\n      <td> {schedule.wed} </td>\n      <td> {schedule.thrus} </td>\n      <td> {schedule.fri} </td>\n      <td> {schedule.sat} </td>\n      <td> {schedule.sun} </td>\n \n      </tr>\n            ))}\n       \n    {/* </div> */}\n    \n    \n    \n  </tbody>\n </Table> \n <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\n    Confirm Schedule\n  </Button>\n</div>\n);\n    }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Schedule1 from \"./schedule\"; \nfunction App() {\n  return (\n    <div className=\"App\">\n      <Schedule1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}